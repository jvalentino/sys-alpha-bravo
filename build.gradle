plugins {
	id 'groovy'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.gretty' version '3.0.9'
	// JACACO!
	id 'jacoco'
	// CODENARC!
	id 'codenarc'
}

apply plugin: 'war'
apply plugin: 'idea'

group = 'com.github.jvalentino'
version = '0.0.1'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {

	// Groovy
	implementation 'org.codehaus.groovy:groovy'

	// Spring Boot Magic
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Security (Login)
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JSP Magic
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'javax.servlet:jstl:1.2'
	implementation 'org.springframework:spring-webmvc:5.2.22.RELEASE'
	implementation 'org.webjars:bootstrap:5.2.0'

	// DB management
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.14.1'

	// MD5
	implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'

	// Testing Magic
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
	testImplementation group: 'org.spockframework', name: 'spock-spring', version: '2.2-groovy-3.0'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'cglib:cglib-nodep:3.3.0'
	testImplementation 'org.objenesis:objenesis:3.3'
	testImplementation 'com.h2database:h2'
	testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

}
/*
sourceSets {
	main {
		resources {
			srcDirs "src/main/webapp"
		}
	}
}*/

tasks.named('test') {
	useJUnitPlatform()
}

gretty {
	httpPort = 8080
	contextPath = '/'
	//servletContainer = 'jetty9.4'
	servletContainer = 'tomcat9'
}

// JACACO!
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
	jacoco.excludes = ['**/*$*_closure*', '**/*/MyServletInitializer*']
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: ['**/*$*_closure*', '**/*/MyServletInitializer*'])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = 0.80
			}
		}
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

// CODENARC!
codenarcTest.enabled = false

task codenarcConsoleReport {
	doLast {
		println file("${codenarc.reportsDir}/main.txt").text
	}
}

codenarcMain {
	finalizedBy codenarcConsoleReport
	reports {
		text.enabled = true
		html.enabled = true
	}
}
